package albertesa.sample.prj.controllers;

import java.util.Collection;
import java.util.NoSuchElementException;
import java.util.Optional;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.fasterxml.jackson.core.JsonProcessingException;

import albertesa.sample.prj.services.ImageService;
import albertesa.sample.prj.services.ProductService;
import albertesa.sample.prj.services.ProductService.Product;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;

@RestController
@RequestMapping("/product")
@Tag(name = "ProductController", description = "Product CRUD API")
//@CrossOrigin(origins = "http://localhost:4200")
public class ProductController {
	
	private static final Logger logger = LoggerFactory.getLogger(ProductController.class);
	
	private ProductService productService;
	private final ImageService imageSvc;

	@Autowired
	public ProductController(ProductService productService, ImageService imageSvc) {
		super();
		this.productService = productService;
		this.imageSvc = imageSvc;
		logger.info("ProductController created");
	}

	@RequestMapping(value = "/list", method = RequestMethod.GET, produces = "application/json")
    public ResponseEntity<Collection<Product>> getProducts(
    		HttpServletRequest request,
    		HttpServletResponse response) throws Exception {
		Collection<Product> prods = productService.getProducts();
		return new ResponseEntity<Collection<Product>>(prods, HttpStatus.OK);
	}

	@RequestMapping(value = "/{prodId}", method = RequestMethod.GET, produces = "application/json")
    public ResponseEntity<Product> getProduct(@PathVariable String prodId) throws Exception {
		Optional<Product> prodOpt = productService.getProduct(prodId);
		Product prod = prodOpt.orElseThrow(
				() -> new NoSuchElementException(String.format("Product not found %s", prodId)));
		return new ResponseEntity<Product>(prod, HttpStatus.OK);
	}

	@Operation(summary = "Set new/existing Product",
			description = "Update/create Product. If \"id\" is \"new\", then a new product will be generated with autogenerated UUID",
			tags = { "ProductController" })
	@ApiResponses(value = {
	        @ApiResponse(responseCode = "200", description = "successful operation",
	                content = @Content(schema = @Schema(implementation = Product.class)))})
	@RequestMapping(value = "/setprod", method = RequestMethod.POST,
			produces = "application/json")
    public ResponseEntity<Product> setProduct(
    		@Parameter(description="Product to add/update. Product will be updated by Product ID. Cannot be null or empty.", 
            required=true, schema=@Schema(implementation = Void.class))
    		@RequestBody ProductRequestParam prodParam,
    		HttpServletRequest request,
    		HttpServletResponse response) throws Exception {
		Product prod = productService.setProduct(prodParam);
		return new ResponseEntity<Product>(prod, HttpStatus.OK);
	}

	@RequestMapping(value = "/{prodId}/deleteprod", method = RequestMethod.POST,
			produces = "application/json")
    public ResponseEntity<DeleteDocResponse> deleteProduct(
    		@PathVariable String prodId,
    		HttpServletRequest request,
    		HttpServletResponse response) throws JsonProcessingException {
		long numOfDeleted = productService.deleteProduct(prodId);
		return new ResponseEntity<DeleteDocResponse>(new DeleteDocResponse(prodId, numOfDeleted), HttpStatus.OK);
	}

	@Operation(summary = "Set new/existing Productc with image",
			description = "Update/create Product. If \"id\" is \"new\", then a new product will be generated with autogenerated UUID",
			tags = { "ProductController" })
	@ApiResponses(value = {
	        @ApiResponse(responseCode = "200", description = "successful operation",
	                content = @Content(schema = @Schema(implementation = Product.class)))})
	@RequestMapping(value = "/setprodwimg", method = RequestMethod.POST,
			consumes = {"multipart/form-data"},
			produces = "application/json")
    public ResponseEntity<Product> setProductWithImage(
    		//@RequestPart("img") MultipartFile img,
    		//@RequestPart("id") String id,
    		//@RequestPart("productName") String productName,
    		//@RequestPart("productDesc") String productDesc,
    		//@RequestPart("productImg") String productImg,
    		@Parameter(description="Product to add/update. Product will be updated by Product ID. Cannot be null or empty.", 
            required=true, schema=@Schema(implementation = Void.class))
    		ProductRequestParam prodParam,
    		HttpServletRequest request,
    		HttpServletResponse response) throws Exception {
		Product prod = productService.setProduct(prodParam);
		if (prodParam.getImg() != null) {
			logger.info("Upload image: {}", prodParam.getImg().getName());
			imageSvc.store(prodParam.getImg());
		}
		return new ResponseEntity<Product>(prod, HttpStatus.OK);
	}
    
}